generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @default(autoincrement()) @id
  email            String             @unique
  name             String
  password         String
  createdAt        DateTime
  updatedAt        DateTime
  django_admin_log django_admin_log[]
  Todo             Todo[]
}

model Todo {
  id           Int      @default(autoincrement()) @id
  title        String
  content      String
  // This type is currently not supported.
  // completed bool
  // This type is currently not supported.
  // isUrgent  bool
  tag          String
  createdAt    DateTime
  updatedAt    DateTime
  postedBy_id  Int
  dateTodo     DateTime
  User         User     @relation(fields: [postedBy_id], references: [id])

  @@index([postedBy_id], name: "Todo_postedBy_id_ad380271")
}

model django_migrations {
  id      Int      @default(autoincrement()) @id
  app     String
  name    String
  applied DateTime
}

model django_admin_log {
  id                  Int                  @default(autoincrement()) @id
  action_time         DateTime
  object_id           String?
  object_repr         String
  change_message      String
  content_type_id     Int?
  user_id             Int
  // This type is currently not supported.
  // action_flag      smallint unsigned
  django_content_type django_content_type? @relation(fields: [content_type_id], references: [id])
  User                User                 @relation(fields: [user_id], references: [id])

  @@index([user_id], name: "django_admin_log_user_id_c564eba6")
  @@index([content_type_id], name: "django_admin_log_content_type_id_c4bce8eb")
}

model django_content_type {
  id               Int                @default(autoincrement()) @id
  app_label        String
  model            String
  django_admin_log django_admin_log[]
  auth_permission  auth_permission[]

  @@unique([app_label, model], name: "django_content_type_app_label_model_76bd3d3b_uniq")
}

model auth_group_permissions {
  id              Int             @default(autoincrement()) @id
  group_id        Int
  permission_id   Int
  auth_group      auth_group      @relation(fields: [group_id], references: [id])
  auth_permission auth_permission @relation(fields: [permission_id], references: [id])

  @@index([permission_id], name: "auth_group_permissions_permission_id_84c5c92e")
  @@index([group_id], name: "auth_group_permissions_group_id_b120cbf9")
  @@unique([group_id, permission_id], name: "auth_group_permissions_group_id_permission_id_0cd325b0_uniq")
}

model auth_permission {
  id                     Int                      @default(autoincrement()) @id
  content_type_id        Int
  codename               String
  name                   String
  django_content_type    django_content_type      @relation(fields: [content_type_id], references: [id])
  auth_group_permissions auth_group_permissions[]

  @@index([content_type_id], name: "auth_permission_content_type_id_2f476e4b")
  @@unique([content_type_id, codename], name: "auth_permission_content_type_id_codename_01ab375a_uniq")
}

model auth_group {
  id                     Int                      @default(autoincrement()) @id
  name                   String                   @unique
  auth_group_permissions auth_group_permissions[]
}

model django_session {
  session_key  String   @id
  session_data String
  expire_date  DateTime

  @@index([expire_date], name: "django_session_expire_date_a5c62663")
}
